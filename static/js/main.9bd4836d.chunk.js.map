{"version":3,"sources":["components/WaitSpinner/WaitSpinner.jsx","Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["WaitSpinner","className","Component","Home","state","useOverlay","queryString","this","inputId","onChange","e","setState","checked","htmlFor","to","label","style","margin","App","props","data","Devices","lazy","DeviceDetails","Users","UserDetails","NotFound","basename","fallback","exact","path","component","render","itemId","match","params","id","itemData","showClose","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mKAKMA,G,6KAEF,OACE,yBAAKC,UAAU,QACb,kBAAC,kBAAD,CAAiBA,UAAU,qB,GAJTC,cAUXF,O,sRCsCAG,G,wDA5Cb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,YAAY,GAHF,E,qDAOJ,IAAD,OACHC,EAAc,eAElB,OADAA,GAAeC,KAAKH,MAAMC,WAAa,OAAS,QAE9C,yBAAKJ,UAAU,8CACb,uBAAGA,UAAU,qBAAb,wPAKA,uBAAGA,UAAU,qBAAb,uNAIA,6BACE,kBAAC,WAAD,CACEO,QAAQ,QACRC,SAAU,SAAAC,GACR,EAAKC,SAAS,CAACN,WAAYK,EAAEE,WAE/BA,QAASL,KAAKH,MAAMC,aAEtB,2BAAOQ,QAAQ,QAAQZ,UAAU,oBAAjC,iCAIF,kBAAC,IAAD,CAAMa,GAAI,WAAaR,GACrB,kBAAC,SAAD,CAAQS,MAAM,cAAcC,MAAO,CAACC,OAAQ,QAAShB,UAAU,2BAEjE,kBAAC,IAAD,CAAMa,GAAI,SAAWR,GACnB,kBAAC,SAAD,CAAQS,MAAM,eAAed,UAAU,gC,GAtC9BC,cCkDJgB,E,kDA9Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDf,MAAQ,CACXgB,KAAM,IAHS,E,qDAcjB,IAAMC,EAAUC,gBAAK,kBAAM,qEACrBC,EAAgBD,gBAAK,kBAAM,sDAC3BE,EAAQF,gBAAK,kBAAM,sEACnBG,EAAcH,gBAAK,kBAAM,sDACzBI,EAAWJ,gBAAK,kBAAM,kCAE5B,OACE,6BACE,kBAAC,IAAD,CAAYK,SAAS,KACnB,kBAAC,WAAD,CAAUC,SAAU,kBAAC5B,EAAA,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,IAAIC,UAAW5B,IACjC,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,WAAWE,OAAQ,SAAAb,GAAK,OAAI,kBAACE,EAAD,SAC9C,kBAAC,IAAD,CACES,KAAK,eACLE,OAAQ,SAAAb,GAAK,OAAI,kBAACI,EAAD,CAAeU,OAAQd,EAAMe,MAAMC,OAAOC,GAAIC,SAAU,KAAMC,WAAW,OAE5F,kBAAC,IAAD,CAAOT,OAAK,EAACC,KAAK,SAASE,OAAQ,SAAAb,GAAK,OAAI,kBAACK,EAAD,SAC5C,kBAAC,IAAD,CACEM,KAAK,aACLE,OAAQ,SAAAb,GAAK,OAAI,kBAACM,EAAD,CAAaQ,OAAQd,EAAMe,MAAMC,OAAOC,GAAIC,SAAU,KAAMC,WAAW,OAG1F,kBAAC,IAAD,CAAOP,UAAWL,Y,GAtCdxB,aCCEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCZNS,IAASX,OAAO,kBAAC,EAAD,MAASY,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9bd4836d.chunk.js","sourcesContent":["import React, {Component} from 'react';\n// Prime React related\nimport {ProgressSpinner} from 'primereact/progressspinner';\nimport './WaitSpinner.css';\n\nclass WaitSpinner extends Component {\n  render() {\n    return (\n      <div className=\"flex\">\n        <ProgressSpinner className=\"flex-center\" />\n      </div>\n    );\n  }\n}\n\nexport default WaitSpinner;\n","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport 'primeflex/primeflex.css';\nimport {Button} from 'primereact/button';\nimport {Checkbox} from 'primereact/checkbox';\n\nimport './Home.css';\n\nclass Home extends Component {\n  constructor() {\n    super();\n    this.state = {\n      useOverlay: true,\n    };\n  }\n\n  render() {\n    let queryString = '?useOverlay=';\n    queryString += this.state.useOverlay ? 'true' : 'false';\n    return (\n      <div className=\"p-grid p-dir-col p-align-center p-nogutter\">\n        <p className=\"p-col description\">\n          Master Detail display using a responsive table. The table displays more or fewer columns depending on\n          available width. When the table becomes too narrow it switches to a single column with a compact display that\n          roughly mimics gmail on a phone.\n        </p>\n        <p className=\"p-col description\">\n          The detail panel can be shown in an overlay panel or optionally in-line with the grid. When the available\n          width is too small to show the detail panel, it will be navigated to instead, regardless of this setting.\n        </p>\n        <div>\n          <Checkbox\n            inputId=\"check\"\n            onChange={e => {\n              this.setState({useOverlay: e.checked});\n            }}\n            checked={this.state.useOverlay}\n          ></Checkbox>\n          <label htmlFor=\"check\" className=\"p-checkbox-label\">\n            Use Overlay for Detail Panel\n          </label>\n        </div>\n        <Link to={'/devices' + queryString}>\n          <Button label=\"Canned Data\" style={{margin: '20px'}} className=\"p-button-raised p-col\" />\n        </Link>\n        <Link to={'/users' + queryString}>\n          <Button label=\"Network Data\" className=\"p-button-raised p-col\" />\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, {Component, Suspense, lazy} from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\n// Prime React related\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\n\nimport WaitSpinner from './components/WaitSpinner/WaitSpinner';\nimport Home from './Home/Home';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n    };\n    if (process.env.NODE_ENV === 'development') {\n      const whyDidYouRender = require('@welldone-software/why-did-you-render');\n      whyDidYouRender(React, {\n        trackAllPureComponents: true,\n      });\n    }\n  }\n\n  render() {\n    const Devices = lazy(() => import('./device/Devices/Devices'));\n    const DeviceDetails = lazy(() => import('./device/DeviceDetails/DeviceDetails'));\n    const Users = lazy(() => import('./user/Users/Users'));\n    const UserDetails = lazy(() => import('./user/UserDetails/UserDetails'));\n    const NotFound = lazy(() => import('./components/NotFound/NotFound'));\n\n    return (\n      <div>\n        <HashRouter basename=\"/\">\n          <Suspense fallback={<WaitSpinner />}>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/devices\" render={props => <Devices></Devices>} />\n              <Route\n                path=\"/devices/:id\"\n                render={props => <DeviceDetails itemId={props.match.params.id} itemData={null} showClose={false} />}\n              />\n              <Route exact path=\"/users\" render={props => <Users></Users>} />\n              <Route\n                path=\"/users/:id\"\n                render={props => <UserDetails itemId={props.match.params.id} itemData={null} showClose={false} />}\n              />\n              {/* when none of the above match */}\n              <Route component={NotFound} />\n            </Switch>\n          </Suspense>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}