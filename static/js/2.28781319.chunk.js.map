{"version":3,"sources":["components/KeyValuePanel/KeyValuePanel.jsx","components/YesNoDialog/YesNoDialog.jsx","components/SelectionButton/SelectionButton.jsx","components/Summary/Summary.jsx","components/ResponsiveTable/ResponsiveTable.jsx","components/SearchHeader/SearchHeader.jsx","components/SelectionHeader/SelectionHeader.jsx","components/ResponsiveHeader/ResponsiveHeader.jsx","components/MasterDetail/MasterDetail.jsx"],"names":["KeyValuePanel","tableStyle","width","labelStyle","fontWeight","padding","whiteSpace","verticalAlign","valueStyle","maxWidth","buildRows","rows","i","props","labels","length","push","key","style","values","this","PureComponent","YesNoDialog","setVisible","visible","setState","hide","state","footer","id","label","icon","onClick","callBack","className","header","onHide","e","modal","closable","message","defaultProps","SelectionButton","colors","circleStyle","backgroundColor","bgColor","borderRadius","border","height","cursor","color","fontSize","flexWrap","updateCircle","textColor","setCircleSize","size","diameter","toggleSelected","stopPropagation","selected","itemData","calculateInitials","name","parts","split","initials","calculateColor","str","hash","hashCode","Math","abs","nameField","bind","prevProps","selectedColor","selectedTextColor","text","selectedText","textStyle","reduce","prevHash","currVal","charCodeAt","Summary","containerStyle","marginRight","marginLeft","marginTop","boldText","overflow","textOverflow","normalText","handleSelection","event","onSelection","showDetail","onShowDetails","line1Field","line2Field","line3Field","idField","alert","ResponsiveTable","summaryTemplate","item","find","onRowSelection","buildColumnModel","model","body","columnModel","slice","breakpointColumns","cm","map","field","loadingBody","loadingText","formatter","Number","toString","unshift","data","changeAll","buttonTemplate","minWidth","rowClassName","isSelected","isDetailItem","includes","detailItem","getSize","breakpoints","selectionChangeCallback","clone","splice","onRowClick","rowClickCallback","resizeDetectorRefreshOptions","leading","trailing","handleWidth","refreshMode","refreshRate","refreshOptions","render","mobile","tableClassName","value","resizableColumns","reorderableColumns","metaKeySelection","selection","onSelectionChange","updateSelectedAndUrl","scrollable","scrollHeight","Component","useOverlay","SearchHeader","toggleLabel","current","hidden","debounce","func","wait","timeout","context","args","arguments","later","apply","clearTimeout","setTimeout","search","searchString","searchCallback","React","createRef","initialSearch","marginBottom","ref","onFocus","hideLabel","onBlur","placeholder","onChange","target","menuModel","popup","el","menu","toggle","SelectionHeader","headerStyle","selectedCountStyle","fullWidthStyle","menuStyle","clearCallback","selectedCount","deleteCallback","ResponsiveHeader","initialSearchString","MasterDetail","getInitialSelection","location","query","queryString","parse","idArray","j","parseInt","getInitialDetail","detail","getInitialSearch","buildMenu","menuItems","items","command","menuProvider","providedItems","onDelete","onSearch","newQuery","history","replace","stringify","encode","load","filter","componentDidMount","document","addEventListener","keyboardNav","dataService","list","then","response","loading","totalRecords","selectionChangedCallback","overlayPanel","show","catch","error","console","log","componentWillUnmount","removeEventListener","index","indexOf","keyCode","inlineDetail","detailWidth","onRowClicked","pathname","selectedIds","buildIdList","forEach","clearSelection","clearDetails","confirmDelete","confirmDialog","deleteSelected","delete","reason","onSummarySelection","config","setReloadCallback","detailPanel","Children","children","child","cloneElement","onClose","flexBasis","flexGrow","flexShrink","WaitSpinner","withRouter"],"mappings":"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","file":"static/js/2.28781319.chunk.js","sourcesContent":["import {PropTypes} from 'prop-types';\nimport React, {PureComponent} from 'react';\n\nclass KeyValuePanel extends PureComponent {\n  tableStyle = {\n    width: '100%',\n  };\n\n  labelStyle = {\n    fontWeight: 'bold',\n    padding: '3px 10px 3px 0px',\n    whiteSpace: 'nowrap',\n    verticalAlign: 'top',\n    width: '1px',\n  };\n\n  valueStyle = {\n    padding: '3px 0px 3px 20px',\n    maxWidth: '1px',\n  };\n\n  buildRows = () => {\n    var rows = [];\n    for (var i = 0; i < this.props.labels.length; i++) {\n      rows.push(\n        <tr key={i}>\n          <td style={this.labelStyle}>{this.props.labels[i] + ':'}</td>\n          <td style={this.valueStyle}>{this.props.values[i]}</td>\n        </tr>\n      );\n    }\n    return rows;\n  };\n\n  render() {\n    return (\n      <table style={this.tableStyle}>\n        <tbody>{this.buildRows()}</tbody>\n      </table>\n    );\n  }\n}\n\nexport default KeyValuePanel;\n\nKeyValuePanel.propTypes = {\n  /** The labeles to be used for the values, : will be appended */\n  labels: PropTypes.array.isRequired,\n  /** The values to be displayed. SHould be in the same order as the labels. */\n  values: PropTypes.array.isRequired,\n};\n","import {Button} from 'primereact/button';\nimport {PropTypes} from 'prop-types';\nimport React, {PureComponent} from 'react';\nimport {Dialog} from 'primereact/dialog';\n\nclass YesNoDialog extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n    };\n  }\n\n  render() {\n    const footer = (\n      <div>\n        <Button id=\"yes\" label=\"Yes\" icon=\"pi pi-check\" onClick={this.props.callBack} />\n        <Button id=\"no\" label=\"No\" icon=\"pi pi-times\" onClick={this.hide} className=\"p-button-secondary\" />\n      </div>\n    );\n\n    return (\n      <Dialog\n        header={this.props.header}\n        visible={this.state.visible}\n        style={{width: '80vw', maxWidth: this.props.maxWidth}}\n        footer={footer}\n        onHide={e => {\n          this.setVisible(false);\n        }}\n        modal={this.props.modal}\n        closable={false}\n      >\n        {this.props.message}\n      </Dialog>\n    );\n  }\n\n  setVisible = visible => {\n    this.setState({visible: visible});\n  };\n\n  hide = () => {\n    this.setVisible(false);\n  };\n}\n\nexport default YesNoDialog;\n\nYesNoDialog.propTypes = {\n  /** The text to be displayed in the dialog header*/\n  header: PropTypes.string.isRequired,\n  /** The text to be displayed in the dialog body*/\n  message: PropTypes.string.isRequired,\n  /** The function to call back  when the dialog is dismissed by clicking on Yes or No */\n  callBack: PropTypes.func.isRequired,\n  /** Display the dialog or not */\n  visible: PropTypes.bool.isRequired,\n  /** Make the dialog modal. Defaults to true */\n  modal: PropTypes.bool,\n  /** Size for mobile, else desktop */\n  mobile: PropTypes.bool,\n  /** The widest the dialog should be allowed to grow. */\n  maxWidth: PropTypes.string,\n};\n\nYesNoDialog.defaultProps = {\n  modal: true,\n  visible: false,\n  maxWidth: '600px',\n};\n","import {PropTypes} from 'prop-types';\nimport React, {PureComponent} from 'react';\n\nclass SelectionButton extends PureComponent {\n  initials;\n  bgColor;\n\n  colors = [\n    '#FF9AA2',\n    '#FFB7B2',\n    '#FFDAC1',\n    '#E2F0CB',\n    '#B5EAD7',\n    '#C7CEEA',\n    '#E0BBE4',\n    '#957DAD',\n    '#D291BC',\n    '#FEC8D8',\n    '#FFDFD3',\n    '#C7CEEA',\n    '#FF9AA2',\n    '#B5EAD7',\n    '#BED7D1',\n    '#F8D1E0',\n  ];\n\n  circleStyle = {\n    backgroundColor: this.props.bgColor ? this.props.bgColor : this.colors[0],\n    borderRadius: '50%',\n    border: 'solid 1px black',\n    width: 36,\n    height: 36,\n    cursor: 'pointer',\n    color: 'black',\n    fontSize: '16px',\n    flexWrap: 'nowrap',\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: this.props.selected,\n    };\n    if (this.props.initials) {\n      this.initials = this.props.initials;\n    } else {\n      if (this.props.itemData) {\n        this.initials = this.calculateInitials(this.props.itemData[this.props.nameField]);\n      } else if (this.props.name) {\n        this.initials = this.calculateInitials(this.props.name);\n      }\n    }\n    this.circleStyle = this.setCircleSize(this.props.size);\n    if (this.props.bgColor) {\n      this.bgColor = this.props.bgColor;\n    } else {\n      if (this.props.itemData) {\n        this.bgColor = this.calculateColor(this.props.itemData[this.props.nameField]);\n      } else if (this.props.name) {\n        this.bgColor = this.calculateColor(this.props.name);\n      } else {\n        this.bgColor = this.calculateColor(this.props.initials);\n      }\n    }\n    this.toggleSelected = this.toggleSelected.bind(this);\n  }\n\n  updateCircle = (bgColor, textColor) => {\n    return {...this.circleStyle, backgroundColor: bgColor, color: textColor};\n  };\n\n  setCircleSize = size => {\n    var diameter;\n    var fontSize;\n    switch (size) {\n      case 'small':\n        diameter = '28px';\n        fontSize = '12px';\n        break;\n\n      case 'large':\n        diameter = '48px';\n        fontSize = '20px';\n        break;\n\n      case 'medium':\n      default:\n        diameter = '36px';\n        fontSize = '16px';\n    }\n    return {\n      ...this.circleStyle,\n      width: diameter,\n      height: diameter,\n      fontSize: fontSize,\n    };\n  };\n\n  toggleSelected = e => {\n    e.stopPropagation();\n    this.setState({selected: !this.state.selected});\n    this.props.onClick(!this.state.selected, this.props.itemData);\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selected !== prevProps.selected) {\n      this.setState({selected: this.props.selected});\n    }\n  }\n\n  render() {\n    var bgColor = this.state.selected ? this.props.selectedColor : this.bgColor;\n    var textColor = this.state.selected ? this.props.selectedTextColor : 'black';\n    this.circleStyle = this.updateCircle(bgColor, textColor);\n    var text = this.state.selected ? this.props.selectedText : this.initials;\n    return (\n      <div\n        className=\"p-grid p-align-center p-justify-center p-nogutter\"\n        style={this.circleStyle}\n        onClick={this.toggleSelected}\n      >\n        <div className=\"p-col-fixed\" style={this.textStyle}>\n          {text}\n        </div>\n      </div>\n    );\n  }\n\n  calculateInitials = name => {\n    if (name) {\n      var parts = name.split(' ');\n      var initials = parts[0][0];\n      if (parts.length > 1) {\n        initials += parts[1][0];\n      }\n      return initials;\n    }\n  };\n\n  // Borrowed from https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\n  hashCode(str) {\n    if (str) {\n      return str.split('').reduce((prevHash, currVal) => ((prevHash << 5) - prevHash + currVal.charCodeAt(0)) | 0, 0);\n    } else {\n      return 0;\n    }\n  }\n\n  calculateColor = str => {\n    var hash = this.hashCode(str) % 16;\n    return this.colors[Math.abs(hash)];\n  };\n}\n\nexport default SelectionButton;\n\nSelectionButton.defaultProps = {\n  selectedColor: '#339CFF',\n  selectedText: '\\u2713', // Checkmark\n  selectedTextColor: 'white',\n  size: 'medium',\n};\n\nSelectionButton.propTypes = {\n  /** The source item data object to extract fields from. */\n  itemData: PropTypes.object,\n  /** The \"initials\" of the item to display in the circle. */\n  initials: PropTypes.string,\n  /** The \"full name\" of the item to display. */\n  name: PropTypes.string,\n  /** The key of the \"name\" field to use. */\n  nameField: PropTypes.string,\n  /** The background color to use for the selection circle. */\n  bgColor: PropTypes.string,\n  /** The background color to use when selected */\n  selectedColor: PropTypes.string,\n  /** The Text to show in the circle when selcted. Defaults to a check mark */\n  selectedText: PropTypes.string,\n  /** Text color when selected. Defaults to white */\n  selectedTextColor: PropTypes.string,\n  /** how large should the circle be. Size can be small, medium or large */\n  size: PropTypes.string,\n  /** An on-click handler. */\n  onClick: PropTypes.func,\n};\n","import {PropTypes} from 'prop-types';\nimport React, {PureComponent} from 'react';\nimport SelectionButton from '../SelectionButton/SelectionButton';\n\nclass Summary extends PureComponent {\n  containerStyle = {\n    flexWrap: 'nowrap',\n    cursor: 'pointer',\n    marginRight: '0em',\n    marginLeft: '0em',\n    marginTop: '0.5em',\n  };\n\n  boldText = {\n    fontSize: '14px',\n    fontWeight: 'bold',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  };\n\n  normalText = {\n    fontSize: '14px',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: this.props.selected,\n    };\n    this.handleSelection = this.handleSelection.bind(this);\n    this.showDetail = this.showDetail.bind(this);\n  }\n\n  handleSelection = event => {\n    this.setState({selected: !this.state.selected});\n    if (this.props.onSelection) {\n      this.props.onSelection(!this.state.selected, this.props.itemData);\n    }\n  };\n\n  showDetail = event => {\n    if (this.props.onShowDetails) {\n      this.props.onShowDetails(this.props.itemData);\n    }\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selected !== prevProps.selected) {\n      this.setState({selected: this.props.selected});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"p-grid p-align-center p-justify-start\" style={this.containerStyle}>\n        <div className=\"p-col-fixed\">\n          <SelectionButton\n            selected={this.state.selected}\n            nameField={this.props.nameField}\n            itemData={this.props.itemData}\n            onClick={this.handleSelection}\n          ></SelectionButton>\n        </div>\n        <div className=\"p-col\" onClick={this.showDetail}>\n          <div style={this.boldText}>{this.props.itemData[this.props.line1Field]}</div>\n          <div style={this.normalText}>{this.props.itemData[this.props.line2Field]}</div>\n          <div style={this.normalText}>{this.props.itemData[this.props.line3Field]}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Summary;\n\nSummary.defaultProps = {\n  idField: 'id',\n  selected: false,\n  onSelection: () => {\n    alert('Please add a selection callback');\n  },\n  onShowDetails: () => {\n    alert('Please add a show details callback');\n  },\n};\n\nSummary.propTypes = {\n  /** The data object to be used to grab values from */\n  itemData: PropTypes.object.isRequired,\n  /** The property name used to create the initials in the select button */\n  nameField: PropTypes.string.isRequired,\n  /** The property name to be used to get an id for this object. */\n  idField: PropTypes.string.isRequired,\n  /** The propery name to be used for the 1st line of the summary */\n  line1Field: PropTypes.string.isRequired,\n  /** The propery name to be used for the 2nd line of the summary */\n  line2Field: PropTypes.string.isRequired,\n  /** The propery name to be used for the 3rd line of the summary */\n  line3Field: PropTypes.string.isRequired,\n  /** Should this initially render as selected? */\n  selected: PropTypes.bool,\n  /** Callback to call when this Summary button is clicked */\n  onSelection: PropTypes.func.isRequired,\n  /** Callback to call when the Summary text is clicked  */\n  onShowDetails: PropTypes.func,\n};\n","import {Column} from 'primereact/column';\nimport {DataTable} from 'primereact/datatable';\nimport {PropTypes} from 'prop-types';\nimport React, {Component} from 'react';\nimport ResizeDetector from 'react-resize-detector';\nimport SelectionButton from '../SelectionButton/SelectionButton';\nimport Summary from '../Summary/Summary';\nimport './ResponsiveTable.css';\n\nclass ResponsiveTable extends Component {\n  constructor(props) {\n    super(props);\n    this.onRowSelection = this.onRowSelection.bind(this);\n    this.rowClassName = this.rowClassName.bind(this);\n    this.changeAll = this.changeAll.bind(this);\n    this.resizeDetectorRefreshOptions = {leading: false, trailing: true};\n  }\n\n  summaryTemplate = item => {\n    return (\n      <Summary\n        itemData={item}\n        idField={this.props.idField}\n        nameField={this.props.nameField}\n        line1Field={this.props.line1Field}\n        line2Field={this.props.line2Field}\n        line3Field={this.props.line3Field}\n        selected={typeof this.props.selected.find(selected => selected.id === item.id) !== 'undefined'}\n        onSelection={this.onRowSelection}\n        onShowDetails={null}\n      ></Summary>\n    );\n  };\n\n  buildColumnModel = size => {\n    var model;\n    switch (size) {\n      case 'mobile':\n        return <Column body={this.summaryTemplate} />;\n      case 'large':\n        model = this.props.columnModel;\n        break;\n      case 'medium':\n        model = this.props.columnModel.slice(0, this.props.breakpointColumns[1]);\n        break;\n      case 'small':\n      default:\n        model = this.props.columnModel.slice(0, this.props.breakpointColumns[0]);\n    }\n\n    var cm = model.map(item => (\n      <Column\n        field={item.field}\n        header={item.header}\n        loadingBody={this.loadingText}\n        style={{width: item.width + 'px'}}\n        body={item.formatter}\n        key={Number(item.id).toString()}\n      />\n    ));\n\n    cm.unshift(\n      <Column\n        header={\n          <SelectionButton\n            initials=\" \"\n            bgColor=\"transparent\"\n            selected={this.props.selected.length === this.props.data.length}\n            onClick={this.changeAll}\n          />\n        }\n        body={this.buttonTemplate}\n        style={{minWidth: '60px', width: '60px'}}\n        key={'selectAll'}\n      />\n    );\n    return cm;\n  };\n\n  rowClassName = item => {\n    return {'p-highlight': this.isSelected(item), 'detail-highlight': this.isDetailItem(item)};\n  };\n\n  isSelected = item => {\n    return this.props.selected.includes(item) && !this.isDetailItem(item);\n  };\n\n  isDetailItem = item => {\n    return item === this.props.detailItem;\n  };\n\n  getSize = width => {\n    const breakpoints = this.props.breakpoints;\n    if (width < breakpoints[0]) {\n      return 'mobile';\n    } else if (width >= breakpoints[0] && width < breakpoints[1]) {\n      return 'small';\n    } else if (width >= breakpoints[1] && width < breakpoints[2]) {\n      return 'medium';\n    } else {\n      return 'large';\n    }\n  };\n\n  render() {\n    return (\n      <ResizeDetector\n        handleWidth\n        refreshMode=\"debounce\"\n        refreshRate={300}\n        refreshOptions={this.resizeDetectorRefreshOptions}\n        render={({width}) => {\n          if (!width) {\n            return <div></div>;\n          }\n          const size = this.getSize(width);\n          const mobile = size === 'mobile';\n          return (\n            <div className=\"p-grid p-align-center p-nogutter\" style={size !== 'small' ? {flexWrap: 'nowrap'} : {}}>\n              <DataTable\n                className={mobile ? 'no-table-header' : ''}\n                tableClassName={mobile ? 'no-borders' : ''}\n                value={this.props.data}\n                resizableColumns={!mobile}\n                reorderableColumns={!mobile}\n                metaKeySelection={false}\n                selection={this.props.selected}\n                onSelectionChange={e => this.updateSelectedAndUrl(e.value)}\n                scrollable={true}\n                scrollHeight={mobile ? 'calc(100vh - 70px)' : 'calc(100vh - 125px)'}\n                onRowClick={this.onRowClick}\n                rowClassName={this.rowClassName}\n              >\n                {this.buildColumnModel(size)}\n              </DataTable>\n            </div>\n          );\n        }}\n      />\n    );\n  }\n\n  changeAll = selected => {\n    if (this.props.selectionChangeCallback) {\n      this.props.selectionChangeCallback(selected ? this.props.data : []);\n    }\n  };\n\n  loadingText() {\n    return <span className=\"loading-text\"></span>;\n  }\n\n  buttonTemplate = item => {\n    return (\n      <SelectionButton\n        size=\"medium\"\n        nameField={this.props.nameField}\n        itemData={item}\n        selected={this.props.selected.includes(item)}\n        onClick={this.onRowSelection}\n      />\n    );\n  };\n\n  onRowSelection = (selected, item) => {\n    let clone = [...this.props.selected];\n    if (selected) {\n      clone.push(item);\n    } else {\n      for (var i = 0; i < clone.length; i++) {\n        if (clone[i].id === item.id) {\n          clone.splice(i, 1);\n          break;\n        }\n      }\n    }\n    this.props.selectionChangeCallback(clone);\n  };\n\n  onRowClick = item => {\n    this.props.rowClickCallback(item.data);\n  };\n}\n\nexport default ResponsiveTable;\n\nResponsiveTable.propTypes = {\n  /** An array of data that will be displayed in the table */\n  data: PropTypes.array.isRequired,\n  /** Id field that is unique per dat record */\n  idField: PropTypes.string.isRequired,\n  /** The property name used to create the initials in the select button */\n  nameField: PropTypes.string.isRequired,\n  /** Most prominant summary field to display in mobile size*/\n  line1Field: PropTypes.string.isRequired,\n  /** Second summary field to display in mobile size*/\n  line2Field: PropTypes.string,\n  /**Third summary field to display in mobile size*/\n  line3Field: PropTypes.string,\n  /** An array of items that are to be initially selected. Optional */\n  selected: PropTypes.array,\n  /** The item that is clicked on, but not selected. We use this to enable shwing details */\n  detailItem: PropTypes.object,\n  /** Column Model to be used on the PrimeReact DataTable */\n  columnModel: PropTypes.array.isRequired,\n  /** Widths at which the table should respond */\n  breakpoints: PropTypes.array,\n  /** Number of columns to show at each breakpoint width */\n  breakpointColumns: PropTypes.array,\n  /** Callback for when a row is clicked. Called with the row data that was clicked on. */\n  rowClickCallback: PropTypes.func,\n  /** Callback for when row selection has changed. Called with an array of row data that was selected */\n  selectionChangeCallback: PropTypes.func,\n};\n\nResponsiveTable.defaultProps = {\n  idField: 'id',\n  breakpoints: [480, 839, 1024],\n  breakpointColumns: [3, 6, 9],\n  selected: [],\n  useOverlay: true,\n  rowClickCallback: () => {},\n  selectionChangeCallback: () => {},\n};\n","import {InputText} from 'primereact/inputtext';\nimport {Button} from 'primereact/button';\nimport {Menu} from 'primereact/menu';\nimport {PropTypes} from 'prop-types';\nimport React, {PureComponent} from 'react';\n\nclass SearchHeader extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.label = React.createRef();\n    this.state = {\n      searchString: this.props.initialSearch,\n    };\n\n    this.toggleLabel = this.toggleLabel.bind(this);\n    this.debounce = this.debounce.bind(this);\n  }\n\n  toggleLabel = () => {\n    if (this.label.current) {\n      this.label.current.hidden = !this.label.current.hidden;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"p-grid p-align-center p-nogutter\" style={{marginBottom: '10px'}}>\n        {this.props.label && (\n          <div ref={this.label} className=\"p-col-fixed\" style={{fontSize: '24px', marginRight: '20px'}}>\n            {this.props.label}\n          </div>\n        )}\n        <div className=\"p-inputgroup p-col\">\n          <InputText\n            onFocus={this.props.hideLabel ? this.toggleLabel : () => {}}\n            onBlur={this.props.hideLabel ? this.toggleLabel : () => {}}\n            style={{width: '100%'}}\n            placeholder=\"Search\"\n            value={this.state.searchString}\n            onChange={e => {\n              this.setState({searchString: e.target.value});\n              this.search(e.target.value);\n            }}\n          />\n        </div>\n        {this.props.menuModel && (\n          <>\n            <Menu model={this.props.menuModel} popup={true} ref={el => (this.menu = el)} />\n            <Button\n              className=\"p-col-fixed\"\n              icon=\"pi pi-bars\"\n              style={{marginLeft: '20px'}}\n              onClick={event => this.menu.toggle(event)}\n            />\n          </>\n        )}\n      </div>\n    );\n  }\n\n  // Borrowed from here:  https://stackoverflow.com/questions/52561133/how-to-perform-debounce-on-onchange-react-event\n  // Other options involve installing libraries like lodash wich seems overkill.\n  debounce = (func, wait) => {\n    let timeout;\n    return function () {\n      const context = this;\n      const args = arguments;\n      const later = function () {\n        timeout = null;\n        func.apply(context, args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  };\n\n  search = this.debounce(searchString => {\n    this.props.searchCallback(searchString);\n  }, 400);\n}\n\nexport default SearchHeader;\n\nSearchHeader.propTypes = {\n  /** The label to be used to identify the array of data. Optional */\n  label: PropTypes.string,\n  /** Should the label be hidden while entering search text. Usefull on small displays. Defaults to false */\n  hideLabel: PropTypes.bool,\n  /** What if anything should the search filed contain initially */\n  initialSearch: PropTypes.string,\n  /** The number of miliseconds to wait before calling back with a new search string */\n  debounceTime: PropTypes.number,\n  /** Search callback. The funtion to call when the search field has changed and no firther changes within the debounce time. */\n  searchCallback: PropTypes.func.isRequired,\n  /** Supply a menu model if you want to display a menu at the far right of the header. */\n  menuModel: PropTypes.array,\n};\n\nSearchHeader.defaultProps = {\n  hideLabel: false,\n};\n","import {Button} from 'primereact/button';\nimport {Menu} from 'primereact/menu';\nimport React, {PureComponent} from 'react';\nimport {PropTypes} from 'prop-types';\n\nclass SelectionHeader extends PureComponent {\n  headerStyle = {marginBottom: '10px'};\n  selectedCountStyle = {fontSize: '18px', marginLeft: '20px'};\n  fullWidthStyle = {width: '100%'};\n  menuStyle = {marginLeft: '20px'};\n\n  render() {\n    return (\n      <div className=\"p-grid p-align-center p-nogutter\" style={this.headerStyle}>\n        <Button className=\"p-col-fixed\" icon=\"pi pi-chevron-left\" onClick={this.props.clearCallback} />\n        <div className=\"p-col-fixed\" style={this.selectedCountStyle}>\n          {this.props.selectedCount}\n        </div>\n        <div className=\"p-col\" style={this.fullWidthStyle}>\n          &nbsp;\n        </div>\n        <Button className=\"p-col-fixed\" icon=\"pi pi-trash\" onClick={this.props.deleteCallback} />\n        {this.props.menuModel && (\n          <>\n            <Menu model={this.props.menuModel} popup={true} ref={el => (this.menu = el)} />\n            <Button\n              className=\"p-col-fixed\"\n              icon=\"pi pi-bars\"\n              style={this.menuStyle}\n              onClick={event => this.menu.toggle(event)}\n            />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default SelectionHeader;\n\nSelectionHeader.propTypes = {\n  clearCallback: PropTypes.func.isRequired,\n  deleteCallback: PropTypes.func.isRequired,\n  selectedCount: PropTypes.number.isRequired,\n  menuModel: PropTypes.array,\n};\n","import {PropTypes} from 'prop-types';\nimport React, {PureComponent} from 'react';\nimport SearchHeader from '../SearchHeader/SearchHeader';\nimport SelectionHeader from '../SelectionHeader/SelectionHeader';\n\nclass ResponsiveHeader extends PureComponent {\n  render = () => {\n    return (\n      <>\n        {this.props.mobile && this.props.selectedCount === 0 && (\n          <SearchHeader\n            key={this.props.initialSearchString}\n            label={this.props.label}\n            initialSearch={this.props.initialSearchString}\n            searchCallback={this.props.searchCallback}\n            hideLabel={true}\n            menuModel={this.props.menuModel}\n          ></SearchHeader>\n        )}\n        {this.props.mobile && this.props.selectedCount > 0 && (\n          <SelectionHeader\n            clearCallback={this.props.clearCallback}\n            deleteCallback={this.props.deleteCallback}\n            selectedCount={this.props.selectedCount}\n            menuModel={this.props.menuModel}\n          ></SelectionHeader>\n        )}\n        {!this.props.mobile && (\n          <SearchHeader\n            key={this.props.initialSearchString}\n            label={this.props.label}\n            initialSearch={this.props.initialSearchString}\n            searchCallback={this.props.searchCallback}\n            menuModel={this.props.menuModel}\n          ></SearchHeader>\n        )}\n      </>\n    );\n  };\n}\n\nexport default ResponsiveHeader;\n\nResponsiveHeader.propTypes = {\n  /** The label to be used to identify the array of data */\n  label: PropTypes.string,\n  /** Display for mobile width Vs any larger width */\n  mobile: PropTypes.bool.isRequired,\n  /** Initial search string. Optional */\n  initialSearchString: PropTypes.string,\n  /** Callback for when the search string has changed. */\n  searchCallback: PropTypes.func.isRequired,\n  /** If you would like a menu to the far left, provide a model here */\n  menuModel: PropTypes.array,\n  /** callback for when the selection should be cleared */\n  clearCallback: PropTypes.func.isRequired,\n  /** callback for when the passed items should be deleted */\n  deleteCallback: PropTypes.func.isRequired,\n  /** The number of items selected */\n  selectedCount: PropTypes.number.isRequired,\n};\n","import {OverlayPanel} from 'primereact/overlaypanel';\nimport {PropTypes} from 'prop-types';\nimport queryString from 'query-string';\nimport React, {Component} from 'react';\nimport ResizeDetector from 'react-resize-detector';\nimport {withRouter} from 'react-router-dom';\nimport YesNoDialog from '../YesNoDialog/YesNoDialog';\nimport ResponsiveTable from '../ResponsiveTable/ResponsiveTable';\nimport ResponsiveHeader from '../ResponsiveHeader/ResponsiveHeader';\nimport './MasterDetail.css';\nimport WaitSpinner from './../WaitSpinner/WaitSpinner';\n\nclass MasterDetail extends Component {\n  // Is the current width considered 'mobile' size?\n  mobile = false;\n  menu = null;\n\n  constructor(props) {\n    super(props);\n    this.label = React.createRef();\n    this.confirmDialog = React.createRef();\n    this.state = {\n      loading: false,\n      selected: [],\n      data: [],\n      totalRecords: 0,\n      detailItem: null,\n      searchString: '',\n      initialSearchString: '',\n    };\n    if (this.props.dataService) {\n      this.props.dataService.setReloadCallback(this.load);\n    }\n    this.onRowClicked = this.onRowClicked.bind(this);\n    this.onSummarySelection = this.onSummarySelection.bind(this);\n    this.deleteSelected = this.deleteSelected.bind(this);\n    this.updateSelectedAndUrl = this.updateSelectedAndUrl.bind(this);\n    this.clearSelection = this.clearSelection.bind(this);\n\n    this.resizeDetectorRefreshOptions = {leading: false, trailing: true};\n  }\n\n  getInitialSelection = data => {\n    let selected = [];\n    if (this.props.location.search) {\n      const query = queryString.parse(this.props.location.search);\n      if (query.selected) {\n        const idArray = query.selected.split(',');\n        for (let i = 0; i < idArray.length; i++) {\n          for (let j = 0; j < data.length; j++) {\n            if (parseInt(idArray[i]) === data[j].id) {\n              selected.push(data[j]);\n              break;\n            }\n          }\n        }\n      }\n    }\n    return selected;\n  };\n\n  getInitialDetail = data => {\n    if (!this.mobile && this.props.location.search) {\n      const query = queryString.parse(this.props.location.search);\n      if (query.detail) {\n        const id = parseInt(query.detail);\n        for (let i = 0; i < data.length; i++) {\n          if (id === data[i].id) {\n            return data[i];\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  getInitialSearch = () => {\n    if (this.props.location.search) {\n      const query = queryString.parse(this.props.location.search);\n      if (query.search) {\n        return query.search;\n      }\n    }\n    return '';\n  };\n\n  buildMenu = selected => {\n    let menuItems = [\n      {\n        label: 'Selection',\n        items: [\n          {\n            label: 'Select All',\n            command: () => {\n              this.changeAll(true);\n            },\n          },\n          {\n            label: 'Select None',\n            command: () => {\n              this.changeAll(false);\n            },\n          },\n        ],\n      },\n    ];\n    if (this.props.menuProvider) {\n      const providedItems = this.props.menuProvider.buildMenu(selected);\n      if (providedItems) {\n        menuItems.push(providedItems);\n      }\n    }\n    if (selected.length > 0) {\n      menuItems.push({\n        label: 'Delete',\n        command: this.onDelete,\n      });\n    }\n\n    return menuItems;\n  };\n\n  onSearch = searchString => {\n    this.setState({searchString: searchString});\n    let newQuery = queryString.parse(this.props.location.search);\n    if (searchString === '') {\n      delete newQuery.search;\n    } else {\n      newQuery.search = searchString;\n    }\n    this.props.history.replace({\n      search: queryString.stringify(newQuery, {encode: false}),\n    });\n    this.load({filter: searchString});\n  };\n\n  componentDidMount = () => {\n    document.addEventListener('keydown', this.keyboardNav, false);\n    const initialSearchString = this.getInitialSearch();\n    if (this.props.dataService) {\n      this.props.dataService\n        .list({filter: initialSearchString})\n        .then(response => {\n          const detailItem = this.getInitialDetail(response);\n          const selected = this.getInitialSelection(response);\n          this.setState({\n            loading: false,\n            data: response,\n            totalRecords: response.length,\n            selected: selected,\n            detailItem: detailItem,\n            initialSearchString: initialSearchString,\n          });\n          this.props.selectionChangedCallback(selected);\n          this.menu = this.buildMenu(selected);\n          if (this.overlayPanel && detailItem) {\n            this.overlayPanel.show(detailItem);\n          }\n        })\n        .catch(error => {\n          console.log(error);\n          this.setState({loading: false});\n        });\n      this.setState({loading: true});\n    }\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener('keydown', this.keyboardNav, false);\n  };\n\n  keyboardNav = event => {\n    if (this.state.detailItem) {\n      let index = this.state.data.indexOf(this.state.detailItem);\n\n      if (event.keyCode === 38 && index > 0) {\n        //Arrow Up\n        this.setState({detailItem: this.state.data[index - 1]}, this.updateSelectedAndUrl);\n      } else if (event.keyCode === 40 && index < this.state.totalRecords - 1) {\n        // Arrow Down\n        this.setState({detailItem: this.state.data[index + 1]}, this.updateSelectedAndUrl);\n      }\n    }\n  };\n\n  getSize = (width, inlineDetail) => {\n    let breakpoints = this.props.breakpoints;\n    width = inlineDetail ? width - this.props.detailWidth : width;\n    if (width < breakpoints[0]) {\n      return 'mobile';\n    } else if (width >= breakpoints[0] && width < breakpoints[1]) {\n      return 'small';\n    } else if (width >= breakpoints[1] && width < breakpoints[2]) {\n      return 'medium';\n    } else {\n      return 'large';\n    }\n  };\n\n  render() {\n    const detailPanel = React.Children.map(this.props.children, child => {\n      return React.cloneElement(child, {\n        itemData: this.state.detailItem,\n        onClose: this.clearDetails,\n      });\n    });\n\n    return (\n      <ResizeDetector\n        handleWidth\n        refreshMode=\"debounce\"\n        refreshRate={300}\n        refreshOptions={this.resizeDetectorRefreshOptions}\n        render={({width}) => {\n          if (!width) {\n            return <div></div>;\n          }\n          const inlineDetail = this.state.detailItem && !this.props.useOverlay;\n          const size = this.getSize(width, inlineDetail);\n          this.mobile = size === 'mobile' && !this.state.detailItem;\n          const flexBasis = this.mobile ? null : this.props.breakpoints[0] + 'px';\n          return (\n            <>\n              <div className=\"p-grid p-nogutter\" style={{flexWrap: 'nowrap'}}>\n                <div className=\"p-col\" style={{flexGrow: 1, flexShrink: 0, flexBasis: flexBasis}}>\n                  <ResponsiveHeader\n                    label=\"Devices\"\n                    initialSearchString={this.state.initialSearchString}\n                    clearCallback={this.clearSelection}\n                    deleteCallback={this.onDelete}\n                    selectedCount={this.state.selected.length}\n                    searchCallback={this.onSearch}\n                    mobile={this.mobile}\n                    menuModel={this.menu}\n                  ></ResponsiveHeader>\n                  <ResponsiveTable\n                    data={this.state.data}\n                    nameField={this.props.nameField}\n                    line1Field={this.props.line1Field}\n                    line2Field={this.props.line2Field}\n                    line3Field={this.props.line3Field}\n                    columnModel={this.props.columnModel}\n                    breakpoints={this.props.breakpoints}\n                    breakpointColumns={this.props.breakpointColumns}\n                    selected={this.state.selected}\n                    detailItem={this.state.detailItem}\n                    selectionChangeCallback={this.updateSelectedAndUrl}\n                    rowClickCallback={this.onRowClicked}\n                  ></ResponsiveTable>\n                </div>\n                {this.state.detailItem && !this.mobile && !this.props.useOverlay && (\n                  <div\n                    className=\"p-col detail-highlight\"\n                    style={{\n                      minWidth: this.props.detailWidth,\n                      flexGrow: 0,\n                      flexShrink: 1,\n                      flexBasis: this.props.detailWidth,\n                    }}\n                  >\n                    {detailPanel}\n                  </div>\n                )}\n                <YesNoDialog\n                  ref={this.confirmDialog}\n                  header=\"Delete Selected Items?\"\n                  message=\"Are you sure you want to delete the selected items?\"\n                  callBack={this.deleteSelected}\n                  maxWidth=\"370px\"\n                ></YesNoDialog>\n                {!this.mobile && this.props.useOverlay && (\n                  <OverlayPanel className=\"overlayStyle\" ref={el => (this.overlayPanel = el)}>\n                    {detailPanel}\n                  </OverlayPanel>\n                )}\n              </div>\n              {this.state.loading && <WaitSpinner />}\n            </>\n          );\n        }}\n      />\n    );\n  }\n\n  onRowClicked = item => {\n    if (this.mobile) {\n      this.props.history.push(this.props.location.pathname + '/' + item.id);\n    } else {\n      let newQuery = queryString.parse(this.props.location.search);\n      if (item === this.state.detailItem) {\n        this.setState({detailItem: null}); // toggle it if already selected\n        if (this.overlayPanel) {\n          this.overlayPanel.hide();\n        }\n        delete newQuery.detail;\n      } else {\n        this.setState({detailItem: item});\n        if (this.overlayPanel) {\n          this.overlayPanel.show(item);\n        }\n        newQuery.detail = item.id;\n      }\n      this.props.history.replace({\n        search: queryString.stringify(newQuery, {encode: false}),\n      });\n    }\n  };\n\n  updateSelectedAndUrl = selected => {\n    let newQuery = queryString.parse(this.props.location.search);\n    if (selected) {\n      const selectedIds = this.buildIdList(selected);\n      if (selectedIds) {\n        newQuery.selected = selectedIds;\n      } else {\n        delete newQuery.selected;\n      }\n    }\n    if (this.state.detailItem) {\n      newQuery.detail = this.state.detailItem.id;\n    } else {\n      delete newQuery.detail;\n    }\n    this.props.history.replace({\n      search: queryString.stringify(newQuery, {encode: false}),\n    });\n    if (selected) {\n      this.setState({selected: selected});\n      this.props.selectionChangedCallback(selected);\n      this.menu = this.buildMenu(selected);\n    }\n  };\n\n  buildIdList = selected => {\n    if (selected.length === 0) {\n      return null;\n    } else {\n      let str = '';\n      selected.forEach((value, index) => {\n        str += value.id;\n        if (selected.length > index + 1) {\n          str += ',';\n        }\n      });\n      return str;\n    }\n  };\n\n  changeAll = selected => {\n    if (selected) {\n      this.updateSelectedAndUrl(this.state.data);\n    } else {\n      this.clearSelection();\n    }\n  };\n\n  clearSelection = () => {\n    this.updateSelectedAndUrl([]);\n  };\n\n  clearDetails = () => {\n    this.setState({detailItem: null}, this.updateSelectedAndUrl);\n    if (this.props.useOverlay && this.overlayPanel) {\n      this.overlayPanel.hide();\n    }\n  };\n\n  onDelete = () => {\n    if (this.props.confirmDelete) {\n      this.confirmDialog.current.setVisible(true);\n    } else {\n      this.deleteSelected();\n    }\n  };\n\n  deleteSelected = () => {\n    if (this.props.dataService) {\n      this.props.dataService\n        .delete(this.state.selected)\n        .then(() => {\n          this.confirmDialog.current.setVisible(false);\n          this.load();\n          this.clearSelection();\n        })\n        .catch(reason => {\n          alert(reason);\n        });\n    }\n  };\n\n  onSummarySelection = (selected, item) => {\n    var clone = [...this.state.selected];\n    if (selected) {\n      clone.push(item);\n    } else {\n      for (var i = 0; i < clone.length; i++) {\n        if (clone[i].id === item.id) {\n          clone.splice(i, 1);\n          break;\n        }\n      }\n    }\n    this.updateSelectedAndUrl(clone);\n  };\n\n  load = config => {\n    if (this.props.dataService) {\n      this.props.dataService.list(config).then(response => {\n        this.setState({\n          loading: false,\n          data: response,\n          totalRecords: response.length,\n        });\n      });\n      this.setState({loading: true});\n    }\n  };\n}\n\nexport default withRouter(MasterDetail);\n\nMasterDetail.propTypes = {\n  /** The label to be used to identify the array of data */\n  label: PropTypes.string.isRequired,\n  /** An array of data that will be used in the master table and the details panel */\n  data: PropTypes.array,\n  /** Column Model to be used on the PrimeReact DataTable */\n  columnModel: PropTypes.array.isRequired,\n  /** Widths at which the table should respond */\n  breakpoints: PropTypes.array,\n  /** Number of columns to show at each breakpoint width */\n  breakpointColumns: PropTypes.array,\n  /** Use an overlay panel to show detail, else inline. Defaults to false */\n  useOverlay: PropTypes.bool,\n  /** If not using overlay specify a width for the detail */\n  detailWidth: PropTypes.number,\n  /** Data Service. Used to fatch data */\n  dataService: PropTypes.object,\n  /** Should a confirmation dialog be shown before deleting */\n  confirmDelete: PropTypes.bool,\n  /** Menu provider to help build the menu and flex based on selection */\n  menuProvider: PropTypes.object,\n  /** Callback when row selection has changed  */\n  selectionChangedCallback: PropTypes.func,\n  /** Id field that is unique per dat record */\n  idField: PropTypes.string,\n  /** The property name used to create the initials in the select button */\n  nameField: PropTypes.string,\n  /** Most prominant summary field to display in mobile size*/\n  line1Field: PropTypes.string.isRequired,\n  /** Second summary field to display in mobile size*/\n  line2Field: PropTypes.string,\n  /**Third summary field to display in mobile size*/\n  line3Field: PropTypes.string,\n};\n\nMasterDetail.defaultProps = {\n  idField: 'id',\n  breakpoints: [480, 839, 1024],\n  breakpointColumns: [3, 6, 9],\n  useOverlay: true,\n  detailWidth: 500,\n  confirmDelete: true,\n  selectionChangedCallback: () => {},\n};\n"],"sourceRoot":""}